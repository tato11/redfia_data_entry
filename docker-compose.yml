version: "3.5"

services:
  app:
    stdin_open: true
    tty: true
    build:
      context: ./docker/build
      dockerfile: app/dockerfile
    image: ${COMPOSE_PROJECT_NAME}_app
    secrets:
      - db_database_name
      - db_write_user
      - db_write_pass
      - app_secret_key
    environment:
      ENV: "${ENV}"
      EXEC_TEST: "${EXEC_TEST}"
      DB_HOST: db
      DB_DATABASE_NAME_FILE: /run/secrets/db_database_name
      DB_WRITE_USER_FILE: /run/secrets/db_write_user
      DB_WRITE_PASS_FILE: /run/secrets/db_write_pass
      APP_SECRET_KEY_FILE: /run/secrets/app_secret_key
    depends_on:
      - db
    volumes:
      - app_volume:/var/www/html
    networks:
      - dmz_network
      - data_network
    links:
      - db
    ports:
      - 3000:3000
    deploy:
      #replicas: 2
      #update_config:
      #  parallelism: 2
      restart_policy:
        condition: on-failure
  db:
    build:
      context: ./docker/build
      dockerfile: db/dockerfile
    image: ${COMPOSE_PROJECT_NAME}_db
    secrets:
      - db_database_name
      - db_root_pass
      - db_write_user
      - db_write_pass
      #- db_read_user
      #- db_read_pass
    environment:
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/db_root_pass
      DB_DATABASE_NAME_FILE: "/run/secrets/db_database_name"
      DB_WRITE_USER_FILE: /run/secrets/db_write_user
      DB_WRITE_PASS_FILE: /run/secrets/db_write_pass
    volumes:
      - db_data_volume:/var/lib/mysql
      - db_template_volume:/opt/deploy/templates
      - db_seed_volume:/opt/deploy/seeds
    networks:
      - data_network
    ports:
      - 3306:3306
    deploy:
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == manager]
  proxy:
    build:
      context: ./docker/build
      dockerfile: proxy/dockerfile
    image: "${COMPOSE_PROJECT_NAME}_proxy"
    depends_on:
      - app
    secrets:
      - proxy_web_domain_name
      - proxy_app_certificate
      - proxy_app_certificate_key
    environment:
      ENV: "${ENV}"
      WEB_DOMAIN_NAME_FILE: /run/secrets/proxy_web_domain_name
      PROXY_APP_CERTIFICATE_FILE: /run/secrets/proxy_app_certificate
      PROXY_APP_CERTIFICATE_KEY_FILE: /run/secrets/proxy_app_certificate_key
    volumes:
      - proxy_config_volume:/etc/nginx/conf.d
      - proxy_config_template_volume:/opt/deploy/templates
      - proxy_settings_volume:/etc/nginx/settings
      - app_volume:/var/www/html
    networks:
      - dmz_network
    ports:
      - 80:80
      - 443:443
    links:
      - app
    deploy:
      restart_policy:
        condition: on-failure

volumes:
  proxy_config_volume:
    driver_opts:
      type: none
      device: "$PWD/docker/infraestructure/proxy/config"
      o: bind
  proxy_config_template_volume:
    driver_opts:
      type: none
      device: "$PWD/docker/infraestructure/proxy/templates"
      o: bind
  proxy_settings_volume:
    driver_opts:
      type: none
      device: "$PWD/docker/infraestructure/proxy/settings"
      o: bind
  app_volume:
    driver_opts:
      type: none
      device: "${PWD}"
      o: bind
  db_data_volume:
    external:
      name: "${DATABASE_VOLUME_NAME}"
  db_template_volume:
    driver_opts:
      type: none
      device: "$PWD/docker/infraestructure/db/templates"
      o: bind
  db_seed_volume:
    driver_opts:
      type: none
      device: "$PWD/docker/infraestructure/db/seeds"
      o: bind

networks:
  dmz_network:
  data_network:

secrets:
  db_database_name:
    file: "$PWD/docker/secrets/db_database_name.txt"
  db_root_pass:
    file: "$PWD/docker/secrets/db_root_pass.txt"
  db_write_user:
    file: "$PWD/docker/secrets/db_write_user.txt"
  db_write_pass:
    file: "$PWD/docker/secrets/db_write_pass.txt"
  #db_read_user:
  #  file: "$PWD/docker/secrets/db_read_user.txt"
  #db_read_pass:
  #  file: "$PWD/docker/secrets/db_read_pass.txt"
  app_secret_key:
    file: "$PWD/docker/secrets/app_secret_key.txt"
  proxy_web_domain_name:
    file: "$PWD/docker/secrets/web_domain_name.txt"
  proxy_app_certificate:
    file: "$PWD/docker/secrets/proxy_app_certificate/ssl.crt"
  proxy_app_certificate_key:
    file: "$PWD/docker/secrets/proxy_app_certificate/ssl.key"
